// <auto-generated />
using FreecraftCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FreecraftCore.DBC.Management.Migrations
{
    [DbContext(typeof(DataBaseClientFilesDatabaseContext))]
    [Migration("20200407175501_AddedAchievementCategoryDbc")]
    partial class AddedAchievementCategoryDbc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FreecraftCore.AchievementCategoryEntry<string>", b =>
                {
                    b.Property<int>("AchievementCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("UIOrder")
                        .HasColumnType("int");

                    b.HasKey("AchievementCategoryId");

                    b.ToTable("Achievement_Category");
                });

            modelBuilder.Entity("FreecraftCore.AchievementEntry<string>", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumCriteriaCount")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SharesCriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("SupersedesId")
                        .HasColumnType("int");

                    b.Property<int>("UIOrder")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("FreecraftCore.AreaTriggerEntry", b =>
                {
                    b.Property<int>("AreaTriggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<float>("Orientation")
                        .HasColumnType("float");

                    b.Property<float>("Radius")
                        .HasColumnType("float");

                    b.HasKey("AreaTriggerId");

                    b.ToTable("AreaTrigger");
                });

            modelBuilder.Entity("FreecraftCore.ItemEntry", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InventorySlotType")
                        .HasColumnType("int");

                    b.Property<int>("ItemClassId")
                        .HasColumnType("int");

                    b.Property<int>("ItemDisplayId")
                        .HasColumnType("int");

                    b.Property<int>("ItemSubClassId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("SheathType")
                        .HasColumnType("int");

                    b.Property<int>("SoundOverride")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("FreecraftCore.MapEntry<string>", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("AreaTableId")
                        .HasColumnType("int");

                    b.Property<int>("CorpseMapId")
                        .HasColumnType("int");

                    b.Property<string>("Directory")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ExpansionId")
                        .HasColumnType("int");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<int>("LoadingScreenId")
                        .HasColumnType("int");

                    b.Property<int>("MapType")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<float>("MinimapIconScale")
                        .HasColumnType("float");

                    b.Property<int>("PvP")
                        .HasColumnType("int");

                    b.Property<int>("RaidOffset")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDayOverride")
                        .HasColumnType("int");

                    b.HasKey("MapId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("FreecraftCore.ProfanityNamesEntry<string>", b =>
                {
                    b.Property<uint>("ProfanityNamesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("LanguageID")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Pattern")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProfanityNamesId");

                    b.ToTable("NamesProfanity");
                });

            modelBuilder.Entity("FreecraftCore.SkillLineAbilityEntry", b =>
                {
                    b.Property<int>("SkillLineAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("Classmask")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ClassmaskNot")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ForwardSpellid")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MaxValue")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MinValue")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Racemask")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RacemaskNot")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RequiredSkillValue")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SkillAquireMethod")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SkillId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpellId")
                        .HasColumnType("int unsigned");

                    b.HasKey("SkillLineAbilityId");

                    b.ToTable("SkillLineAbility");
                });

            modelBuilder.Entity("FreecraftCore.SpellCastTimesEntry", b =>
                {
                    b.Property<int>("SpellCastTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("CastTime")
                        .HasColumnType("int unsigned");

                    b.Property<int>("CastTimePerLevel")
                        .HasColumnType("int");

                    b.Property<uint>("MinCastTime")
                        .HasColumnType("int unsigned");

                    b.HasKey("SpellCastTimeId");

                    b.ToTable("SpellCastTimes");
                });

            modelBuilder.Entity("FreecraftCore.SpellDifficultyEntry", b =>
                {
                    b.Property<int>("SpellDifficultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Heroic10manSpellId")
                        .HasColumnType("int");

                    b.Property<int>("Heroic25manSpellId")
                        .HasColumnType("int");

                    b.Property<int>("Normal10manSpellId")
                        .HasColumnType("int");

                    b.Property<int>("Normal25manSpellId")
                        .HasColumnType("int");

                    b.HasKey("SpellDifficultyId");

                    b.ToTable("SpellDifficulty");
                });

            modelBuilder.Entity("FreecraftCore.SpellDurationEntry", b =>
                {
                    b.Property<int>("SpellDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("Duration")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("DurationPerLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MaxDuration")
                        .HasColumnType("int unsigned");

                    b.HasKey("SpellDurationId");

                    b.ToTable("SpellDuration");
                });

            modelBuilder.Entity("FreecraftCore.SpellEntry<string>", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("ActiveIconID")
                        .HasColumnType("int unsigned");

                    b.Property<int>("AreaGroupId")
                        .HasColumnType("int");

                    b.Property<uint>("Attributes")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx2")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx3")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx4")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx5")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx6")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AttributesEx7")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AuraInterruptFlags")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("BaseLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("CasterAuraSpell")
                        .HasColumnType("int unsigned");

                    b.Property<int>("CasterAuraState")
                        .HasColumnType("int");

                    b.Property<int>("CasterAuraStateNot")
                        .HasColumnType("int");

                    b.Property<uint>("CastingTimeIndex")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Category")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("CategoryRecoveryTime")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ChannelInterruptFlags")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Dispel")
                        .HasColumnType("int unsigned");

                    b.Property<int>("DmgClass")
                        .HasColumnType("int");

                    b.Property<uint>("DurationIndex")
                        .HasColumnType("int unsigned");

                    b.Property<int>("EquippedItemClass")
                        .HasColumnType("int");

                    b.Property<int>("EquippedItemInventoryTypeMask")
                        .HasColumnType("int");

                    b.Property<int>("EquippedItemSubClassMask")
                        .HasColumnType("int");

                    b.Property<uint>("ExcludeCasterAuraSpell")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ExcludeTargetAuraSpell")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FacingCasterFlags")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("InterruptFlags")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ManaCost")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ManaCostPercentage")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ManaCostPerlevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ManaPerSecond")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ManaPerSecondPerLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MaxAffectedTargets")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MaxLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MaxTargetLevel")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Mechanic")
                        .HasColumnType("int");

                    b.Property<uint>("MinFactionId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("MinReputation")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ModalNextSpell")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("PowerDisplayId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("PowerType")
                        .HasColumnType("int unsigned");

                    b.Property<int>("PreventionType")
                        .HasColumnType("int");

                    b.Property<uint>("ProcChance")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ProcCharges")
                        .HasColumnType("int unsigned");

                    b.Property<int>("ProcFlags")
                        .HasColumnType("int");

                    b.Property<uint>("RangeIndex")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RecoveryTime")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RequiredAuraVision")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RequiresSpellFocus")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("RuneCostID")
                        .HasColumnType("int unsigned");

                    b.Property<int>("SchoolMask")
                        .HasColumnType("int");

                    b.Property<float>("Speed")
                        .HasColumnType("float");

                    b.Property<uint>("SpellDescriptionVariableID")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpellDifficultyId")
                        .HasColumnType("int unsigned");

                    b.Property<int>("SpellFamilyName")
                        .HasColumnType("int");

                    b.Property<uint>("SpellIconID")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpellLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpellMissileID")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpellPriority")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("StackAmount")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("StanceBarOrder")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("Stances")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("StancesNot")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("StartRecoveryCategory")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("StartRecoveryTime")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("TargetAuraSpell")
                        .HasColumnType("int unsigned");

                    b.Property<int>("TargetAuraState")
                        .HasColumnType("int");

                    b.Property<int>("TargetAuraStateNot")
                        .HasColumnType("int");

                    b.Property<int>("TargetCreatureType")
                        .HasColumnType("int");

                    b.Property<uint>("Targets")
                        .HasColumnType("int unsigned");

                    b.HasKey("SpellId");

                    b.ToTable("Spell");
                });

            modelBuilder.Entity("FreecraftCore.SpellRadiusEntry", b =>
                {
                    b.Property<uint>("SpellRadiusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<float>("Radius")
                        .HasColumnType("float");

                    b.Property<float>("Radius2")
                        .HasColumnType("float");

                    b.Property<int>("Zero")
                        .HasColumnType("int");

                    b.HasKey("SpellRadiusId");

                    b.ToTable("SpellRadius");
                });

            modelBuilder.Entity("FreecraftCore.SpellRangeEntry<string>", b =>
                {
                    b.Property<uint>("SpellRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Field5")
                        .HasColumnType("int unsigned");

                    b.Property<float>("MaxRange")
                        .HasColumnType("float");

                    b.Property<float>("MaxRangeFriendly")
                        .HasColumnType("float");

                    b.Property<float>("MinRange")
                        .HasColumnType("float");

                    b.Property<float>("MinRangeFriendly")
                        .HasColumnType("float");

                    b.HasKey("SpellRangeId");

                    b.ToTable("SpellRange");
                });

            modelBuilder.Entity("FreecraftCore.AchievementCategoryEntry<string>", b =>
                {
                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Name", b1 =>
                        {
                            b1.Property<int>("AchievementCategoryEntry<string>AchievementCategoryId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("AchievementCategoryEntry<string>AchievementCategoryId");

                            b1.ToTable("Achievement_Category");

                            b1.WithOwner()
                                .HasForeignKey("AchievementCategoryEntry<string>AchievementCategoryId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.AchievementEntry<string>", b =>
                {
                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Description", b1 =>
                        {
                            b1.Property<int>("AchievementEntry<string>AchievementId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("AchievementEntry<string>AchievementId");

                            b1.ToTable("Achievement");

                            b1.WithOwner()
                                .HasForeignKey("AchievementEntry<string>AchievementId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Reward", b1 =>
                        {
                            b1.Property<int>("AchievementEntry<string>AchievementId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("AchievementEntry<string>AchievementId");

                            b1.ToTable("Achievement");

                            b1.WithOwner()
                                .HasForeignKey("AchievementEntry<string>AchievementId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Title", b1 =>
                        {
                            b1.Property<int>("AchievementEntry<string>AchievementId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("AchievementEntry<string>AchievementId");

                            b1.ToTable("Achievement");

                            b1.WithOwner()
                                .HasForeignKey("AchievementEntry<string>AchievementId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.AreaTriggerEntry", b =>
                {
                    b.OwnsOne("FreecraftCore.Vector3<float>", "Position", b1 =>
                        {
                            b1.Property<int>("AreaTriggerEntryAreaTriggerId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("float");

                            b1.Property<float>("Y")
                                .HasColumnType("float");

                            b1.Property<float>("Z")
                                .HasColumnType("float");

                            b1.HasKey("AreaTriggerEntryAreaTriggerId");

                            b1.ToTable("AreaTrigger");

                            b1.WithOwner()
                                .HasForeignKey("AreaTriggerEntryAreaTriggerId");
                        });

                    b.OwnsOne("FreecraftCore.Vector3<float>", "UnalignedBoxDimension", b1 =>
                        {
                            b1.Property<int>("AreaTriggerEntryAreaTriggerId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("float");

                            b1.Property<float>("Y")
                                .HasColumnType("float");

                            b1.Property<float>("Z")
                                .HasColumnType("float");

                            b1.HasKey("AreaTriggerEntryAreaTriggerId");

                            b1.ToTable("AreaTrigger");

                            b1.WithOwner()
                                .HasForeignKey("AreaTriggerEntryAreaTriggerId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.MapEntry<string>", b =>
                {
                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "MapDescription0", b1 =>
                        {
                            b1.Property<int>("MapEntry<string>MapId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("MapEntry<string>MapId");

                            b1.ToTable("Map");

                            b1.WithOwner()
                                .HasForeignKey("MapEntry<string>MapId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "MapDescription1", b1 =>
                        {
                            b1.Property<int>("MapEntry<string>MapId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("MapEntry<string>MapId");

                            b1.ToTable("Map");

                            b1.WithOwner()
                                .HasForeignKey("MapEntry<string>MapId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "MapName", b1 =>
                        {
                            b1.Property<int>("MapEntry<string>MapId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("MapEntry<string>MapId");

                            b1.ToTable("Map");

                            b1.WithOwner()
                                .HasForeignKey("MapEntry<string>MapId");
                        });

                    b.OwnsOne("FreecraftCore.Vector2<int>", "Corpse", b1 =>
                        {
                            b1.Property<int>("MapEntry<string>MapId")
                                .HasColumnType("int");

                            b1.Property<int>("X")
                                .HasColumnType("int");

                            b1.Property<int>("Y")
                                .HasColumnType("int");

                            b1.HasKey("MapEntry<string>MapId");

                            b1.ToTable("Map");

                            b1.WithOwner()
                                .HasForeignKey("MapEntry<string>MapId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.SkillLineAbilityEntry", b =>
                {
                    b.OwnsOne("FreecraftCore.Vector2<uint>", "CharacterPoints", b1 =>
                        {
                            b1.Property<int>("SkillLineAbilityEntrySkillLineAbilityId")
                                .HasColumnType("int");

                            b1.Property<uint>("X")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Y")
                                .HasColumnType("int unsigned");

                            b1.HasKey("SkillLineAbilityEntrySkillLineAbilityId");

                            b1.ToTable("SkillLineAbility");

                            b1.WithOwner()
                                .HasForeignKey("SkillLineAbilityEntrySkillLineAbilityId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.SpellEntry<string>", b =>
                {
                    b.OwnsOne("FreecraftCore.Flags96<uint>", "SpellFamilyFlags", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("One")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Three")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Two")
                                .HasColumnType("int unsigned");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Description", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Rank", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "SpellName", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "ToolTip", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.RequiredReagentData", "ReagentsRequired", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");

                            b1.OwnsOne("FreecraftCore.ReagentDataChunk<int>", "ReagentId", b2 =>
                                {
                                    b2.Property<int>("RequiredReagentDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Eight")
                                        .HasColumnType("int");

                                    b2.Property<int>("Five")
                                        .HasColumnType("int");

                                    b2.Property<int>("Four")
                                        .HasColumnType("int");

                                    b2.Property<int>("One")
                                        .HasColumnType("int");

                                    b2.Property<int>("Seven")
                                        .HasColumnType("int");

                                    b2.Property<int>("Six")
                                        .HasColumnType("int");

                                    b2.Property<int>("Three")
                                        .HasColumnType("int");

                                    b2.Property<int>("Two")
                                        .HasColumnType("int");

                                    b2.HasKey("RequiredReagentDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("RequiredReagentDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.ReagentDataChunk<uint>", "ReagentCount", b2 =>
                                {
                                    b2.Property<int>("RequiredReagentDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Eight")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Five")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Four")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("One")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Seven")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Six")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Three")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Two")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("RequiredReagentDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("RequiredReagentDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellTotemDataChunk<uint>", "Totem", b2 =>
                                {
                                    b2.Property<int>("RequiredReagentDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("One")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Two")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("RequiredReagentDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("RequiredReagentDataSpellEntry<string>SpellId");
                                });
                        });

                    b.OwnsOne("FreecraftCore.SpellEffectData", "SpellEffectInformation", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<FreecraftCore.AuraType>", "EffectApplyAuraName", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<FreecraftCore.SpellEffect>", "Effect", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<FreecraftCore.SpellMechanic>", "EffectMechanic", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<FreecraftCore.SpellTargetType>", "EffectImplicitTargetA", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<FreecraftCore.SpellTargetType>", "EffectImplicitTargetB", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<float>", "EffectMultipleValue", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Effect1")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect2")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect3")
                                        .HasColumnType("float");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<float>", "EffectPointsPerComboPoint", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Effect1")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect2")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect3")
                                        .HasColumnType("float");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<float>", "EffectRealPointsPerLevel", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Effect1")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect2")
                                        .HasColumnType("float");

                                    b2.Property<float>("Effect3")
                                        .HasColumnType("float");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<int>", "EffectBasePoints", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<int>", "EffectDieSides", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<int>", "EffectMiscValue", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<int>", "EffectMiscValueB", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect1")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect2")
                                        .HasColumnType("int");

                                    b2.Property<int>("Effect3")
                                        .HasColumnType("int");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectAmplitude", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectChainTarget", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectItemType", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectRadiusIndex", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectSpellClassMaskA", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectSpellClassMaskB", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectSpellClassMaskC", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });

                            b1.OwnsOne("FreecraftCore.SpellEffectDataChunk<uint>", "EffectTriggerSpell", b2 =>
                                {
                                    b2.Property<int>("SpellEffectDataSpellEntry<string>SpellId")
                                        .HasColumnType("int");

                                    b2.Property<uint>("Effect1")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect2")
                                        .HasColumnType("int unsigned");

                                    b2.Property<uint>("Effect3")
                                        .HasColumnType("int unsigned");

                                    b2.HasKey("SpellEffectDataSpellEntry<string>SpellId");

                                    b2.ToTable("Spell");

                                    b2.WithOwner()
                                        .HasForeignKey("SpellEffectDataSpellEntry<string>SpellId");
                                });
                        });

                    b.OwnsOne("FreecraftCore.SpellEffectDataChunk<float>", "DamageCoeficient", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<float>("Effect1")
                                .HasColumnType("float");

                            b1.Property<float>("Effect2")
                                .HasColumnType("float");

                            b1.Property<float>("Effect3")
                                .HasColumnType("float");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.SpellEffectDataChunk<float>", "DmgMultiplier", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<float>("Effect1")
                                .HasColumnType("float");

                            b1.Property<float>("Effect2")
                                .HasColumnType("float");

                            b1.Property<float>("Effect3")
                                .HasColumnType("float");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.SpellTotemDataChunk<uint>", "TotemCategory", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("One")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Two")
                                .HasColumnType("int unsigned");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });

                    b.OwnsOne("FreecraftCore.SpellVisualData", "SpellVisual", b1 =>
                        {
                            b1.Property<int>("SpellEntry<string>SpellId")
                                .HasColumnType("int");

                            b1.Property<uint>("One")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Two")
                                .HasColumnType("int unsigned");

                            b1.HasKey("SpellEntry<string>SpellId");

                            b1.ToTable("Spell");

                            b1.WithOwner()
                                .HasForeignKey("SpellEntry<string>SpellId");
                        });
                });

            modelBuilder.Entity("FreecraftCore.SpellRangeEntry<string>", b =>
                {
                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Description1", b1 =>
                        {
                            b1.Property<uint>("SpellRangeEntry<string>SpellRangeId")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellRangeEntry<string>SpellRangeId");

                            b1.ToTable("SpellRange");

                            b1.WithOwner()
                                .HasForeignKey("SpellRangeEntry<string>SpellRangeId");
                        });

                    b.OwnsOne("FreecraftCore.LocalizedStringDBC<string>", "Description2", b1 =>
                        {
                            b1.Property<uint>("SpellRangeEntry<string>SpellRangeId")
                                .HasColumnType("int unsigned");

                            b1.Property<uint>("Flags")
                                .HasColumnType("int unsigned");

                            b1.Property<string>("deDE")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enCN")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enTW")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("enUS")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esES")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("esMX")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("frFR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("itIT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("koKR")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ptPT")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("ruRU")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("SpellRangeEntry<string>SpellRangeId");

                            b1.ToTable("SpellRange");

                            b1.WithOwner()
                                .HasForeignKey("SpellRangeEntry<string>SpellRangeId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
